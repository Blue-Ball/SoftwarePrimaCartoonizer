<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AForge.Imaging</name>
    </assembly>
    <members>
        <member name="T:AForge.Imaging.Blob">
            <summary>
            Image's blob
            </summary>
            
            <remarks>The class represents a blob - part of another images. The
            class encapsulates the blob itself and information about its position
            in parent image.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Blob.Image">
            <summary>
            Blob's image
            </summary>
        </member>
        <member name="P:AForge.Imaging.Blob.Location">
            <summary>
            Blob's location in parent (owner) image (see <see cref="P:AForge.Imaging.Blob.Owner"/> property)
            </summary>
        </member>
        <member name="P:AForge.Imaging.Blob.Owner">
            <summary>
            Blob's owner image
            </summary>
        </member>
        <member name="M:AForge.Imaging.Blob.#ctor(System.Drawing.Bitmap,System.Drawing.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Blob"/> class
            </summary>
            
            <param name="image">Blob's image</param>
            <param name="location">Blob's location in parent image</param>
            
        </member>
        <member name="M:AForge.Imaging.Blob.#ctor(System.Drawing.Bitmap,System.Drawing.Point,System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Blob"/> class
            </summary>
            
            <param name="image">Blob's image</param>
            <param name="location">Blob's location in parent image</param>
            <param name="owner">Blob's owner image</param>
            
        </member>
        <member name="M:AForge.Imaging.Blob.Finalize">
            <summary>
            Class destructor
            </summary>
        </member>
        <member name="M:AForge.Imaging.Blob.Dispose">
            <summary>
            Dispose the object
            </summary>
        </member>
        <member name="M:AForge.Imaging.Blob.Dispose(System.Boolean)">
            <summary>
            Object disposing routine
            </summary>
            
            <param name="disposing"><b>True</b> if the method is called from
            <see cref="M:AForge.Imaging.Blob.Dispose"/> method, <b>false</b> if the method is called
            from destructor.</param>
            
        </member>
        <member name="T:AForge.Imaging.BlobCounter">
            <summary>
            Blob counter - counts objects in binrary image
            </summary>
            
            <remarks>The class counts and extracts stand alone objects in
            binary images.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.BlobCounter.ObjectsCount">
            <summary>
            Objects count
            </summary>
        </member>
        <member name="P:AForge.Imaging.BlobCounter.ObjectLabels">
            <summary>
            Object labels
            </summary>
            
            <remarks>The array of <b>width</b> * <b>height</b> size, which holds
            labels for all objects. The background is represented with <b>0</b> value,
            but objects are represented with labels starting from <b>1</b>.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.BlobCounter.ProcessImage(System.Drawing.Bitmap)">
            <summary>
            Builds objects map
            </summary>
            
            <param name="image">Source binary image</param>
            
            <remarks>Processes the image and builds objects map, which used later to extracts blobs.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.BlobCounter.ProcessImage(System.Drawing.Imaging.BitmapData)">
            <summary>
            Builds objects map
            </summary>
            
            <param name="imageData">Source image data</param>
            
            <remarks>Processes the image and builds objects map, which used later to extracts blobs.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.BlobCounter.GetObjectRectangles(System.Drawing.Bitmap)">
            <summary>
            Gets objects rectangles
            </summary>
            
            <param name="image">Source image</param>
            
            <returns>Returns array of objects rectangles</returns>
            
            <remarks>The method returns array of objects rectangles. Before calling the
            method, the <see cref="M:AForge.Imaging.BlobCounter.ProcessImage(System.Drawing.Bitmap)"/> or <see cref="M:AForge.Imaging.BlobCounter.ProcessImage(System.Drawing.Imaging.BitmapData)"/>
            method should be calls, which will build objects map.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.BlobCounter.GetObjectRectangles(System.Drawing.Imaging.BitmapData)">
            <summary>
            Gets objects rectangles
            </summary>
            
            <param name="imageData">Source image data</param>
            
            <returns>Returns array of objects rectangles</returns>
            
            <remarks>The method returns array of objects rectangles. Before calling the
            method, the <see cref="M:AForge.Imaging.BlobCounter.ProcessImage(System.Drawing.Bitmap)"/> or <see cref="M:AForge.Imaging.BlobCounter.ProcessImage(System.Drawing.Imaging.BitmapData)"/>
            method should be calls, which will build objects map.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.BlobCounter.GetObjects(System.Drawing.Bitmap)">
            <summary>
            Gets blobs
            </summary>
            
            <param name="image">Source image</param>
            
            <returns>Returns array of blobs</returns>
            
            <remarks>The method returns array of blobs. Before calling the
            method, the <see cref="M:AForge.Imaging.BlobCounter.ProcessImage(System.Drawing.Bitmap)"/> or <see cref="M:AForge.Imaging.BlobCounter.ProcessImage(System.Drawing.Imaging.BitmapData)"/>
            method should be calls, which will build objects map.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.BlobCounter.GetObjects(System.Drawing.Imaging.BitmapData)">
            <summary>
            Gets blobs
            </summary>
            
            <param name="imageData">Source image data</param>
            
            <returns>Returns array of blobs</returns>
            
            <remarks>The method returns array of blobs. Before calling the
            method, the <see cref="M:AForge.Imaging.BlobCounter.ProcessImage(System.Drawing.Bitmap)"/> or <see cref="M:AForge.Imaging.BlobCounter.ProcessImage(System.Drawing.Imaging.BitmapData)"/>
            method should be calls, which will build objects map.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.RGB">
            <summary>
            RGB components
            </summary>
            
            <remarks>The class encapsulates <b>RGB</b> color components.<br /><br />
            <b>Note</b>: <see cref="T:System.Drawing.Imaging.PixelFormat">PixelFormat.Format24bppRgb</see>
            actually means BGR format.</remarks>
            
        </member>
        <member name="F:AForge.Imaging.RGB.R">
            <summary>
            Index of red component
            </summary>
        </member>
        <member name="F:AForge.Imaging.RGB.G">
            <summary>
            Index of green component
            </summary>
        </member>
        <member name="F:AForge.Imaging.RGB.B">
            <summary>
            Index of blue component
            </summary>
        </member>
        <member name="F:AForge.Imaging.RGB.Red">
            <summary>
            Red component
            </summary>
        </member>
        <member name="F:AForge.Imaging.RGB.Green">
            <summary>
            Green component
            </summary>
        </member>
        <member name="F:AForge.Imaging.RGB.Blue">
            <summary>
            Blue component
            </summary>
        </member>
        <member name="P:AForge.Imaging.RGB.Color">
            <summary>
            <see cref="T:System.Drawing.Color">Color</see> value of the class 
            </summary>
        </member>
        <member name="M:AForge.Imaging.RGB.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.RGB"/> class
            </summary>
        </member>
        <member name="M:AForge.Imaging.RGB.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.RGB"/> class
            </summary>
            
            <param name="red">Red component</param>
            <param name="green">Green component</param>
            <param name="blue">Blue component</param>
            
        </member>
        <member name="M:AForge.Imaging.RGB.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.RGB"/> class
            </summary>
            
            <param name="color">Initialize from specified <see cref="T:System.Drawing.Color">color</see></param>
            
        </member>
        <member name="T:AForge.Imaging.HSL">
            <summary>
            HSL components
            </summary>
            
            <remarks>The class encapsulates <b>HSL</b> color components.</remarks>
            
        </member>
        <member name="F:AForge.Imaging.HSL.Hue">
            <summary>
            Hue component
            </summary>
            
            <remarks>Hue is measured in the range of [0, 359].</remarks>
            
        </member>
        <member name="F:AForge.Imaging.HSL.Saturation">
            <summary>
            Saturation component
            </summary>
            
            <remarks>Saturation is measured in the range of [0, 1].</remarks>
            
        </member>
        <member name="F:AForge.Imaging.HSL.Luminance">
            <summary>
            Luminance value
            </summary>
            
            <remarks>Luminance is measured in the range of [0, 1].</remarks>
            
        </member>
        <member name="M:AForge.Imaging.HSL.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.HSL"/> class
            </summary>
        </member>
        <member name="M:AForge.Imaging.HSL.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.HSL"/> class
            </summary>
            
            <param name="hue">Hue component</param>
            <param name="saturation">Saturation component</param>
            <param name="luminance">Luminance component</param>
            
        </member>
        <member name="T:AForge.Imaging.YCbCr">
            <summary>
            YCbCr components
            </summary>
            
            <remarks>The class encapsulates <b>YCbCr</b> color components.</remarks>
            
        </member>
        <member name="F:AForge.Imaging.YCbCr.YIndex">
            <summary>
            Index of <b>Y</b> component
            </summary>
        </member>
        <member name="F:AForge.Imaging.YCbCr.CbIndex">
            <summary>
            Index of <b>Cb</b> component
            </summary>
        </member>
        <member name="F:AForge.Imaging.YCbCr.CrIndex">
            <summary>
            Index of <b>Cr</b> component
            </summary>
        </member>
        <member name="F:AForge.Imaging.YCbCr.Y">
            <summary>
            <b>Y</b> component
            </summary>
        </member>
        <member name="F:AForge.Imaging.YCbCr.Cb">
            <summary>
            <b>Cb</b> component
            </summary>
        </member>
        <member name="F:AForge.Imaging.YCbCr.Cr">
            <summary>
            <b>Cr</b> component
            </summary>
        </member>
        <member name="M:AForge.Imaging.YCbCr.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.YCbCr"/> class
            </summary>
        </member>
        <member name="M:AForge.Imaging.YCbCr.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.YCbCr"/> class
            </summary>
            
            <param name="y"><b>Y</b> component</param>
            <param name="cb"><b>Cb</b> component</param>
            <param name="cr"><b>Cr</b> component</param>
            
        </member>
        <member name="T:AForge.Imaging.ColorConverter">
            <summary>
            Color converter - converts colors from different color spaces
            </summary>
            
            <remarks>The class provides static method, which implement conversation
            between <b>RGB</b> and other color palettes.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.ColorConverter.RGB2HSL(AForge.Imaging.RGB,AForge.Imaging.HSL)">
            <summary>
            Convert from RGB to HSL color space 
            </summary>
            
            <param name="rgb">Source color in <b>RGB</b> color space</param>
            <param name="hsl">Destination color in <b>HSL</b> color space</param>
            
        </member>
        <member name="M:AForge.Imaging.ColorConverter.HSL2RGB(AForge.Imaging.HSL,AForge.Imaging.RGB)">
            <summary>
            Convert from HSL to RGB color space 
            </summary>
            
            <param name="hsl">Source color in <b>HSL</b> color space</param>
            <param name="rgb">Destination color in <b>RGB</b> color space</param>
            
        </member>
        <member name="M:AForge.Imaging.ColorConverter.RGB2YCbCr(AForge.Imaging.RGB,AForge.Imaging.YCbCr)">
            <summary>
            Convert from RGB to YCbCr color space (Rec 601-1 specification) 
            </summary>
            
            <param name="rgb">Source color in <b>RGB</b> color space</param>
            <param name="ycbcr">Destination color in <b>YCbCr</b> color space</param>
            
        </member>
        <member name="M:AForge.Imaging.ColorConverter.YCbCr2RGB(AForge.Imaging.YCbCr,AForge.Imaging.RGB)">
            <summary>
            Convert from YCbCr to RGB color space 
            </summary>
            
            <param name="ycbcr">Source color in <b>YCbCr</b> color space</param>
            <param name="rgb">Destination color in <b>RGB</b> color spacs</param>
            
        </member>
        <member name="T:AForge.Imaging.ComplexImage">
            <summary>
            Complex image
            </summary>
            
            <remarks>Represents image in complex numbers sutable for Fourier
            transformations.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.ComplexImage.Width">
            <summary>
            Image width
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.ComplexImage.Height">
            <summary>
            Image height
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.ComplexImage.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.ComplexImage"/> class
            </summary>
            
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            
        </member>
        <member name="M:AForge.Imaging.ComplexImage.Clone">
            <summary>
            Clone the complex image
            </summary>
            
            <returns>Returns copy of the image.</returns>
            
        </member>
        <member name="M:AForge.Imaging.ComplexImage.FromBitmap(System.Drawing.Bitmap)">
            <summary>
            Creates complex image from bitmap
            </summary>
            
            <param name="srcImage">Source bitmap</param>
            
            <returns>Returns an instance of complex image.</returns>
            
        </member>
        <member name="M:AForge.Imaging.ComplexImage.ToBitmap">
            <summary>
            Convert complex image to bitmap
            </summary>
            
            <returns>Returns grayscale bitmap</returns>
            
        </member>
        <member name="M:AForge.Imaging.ComplexImage.ForwardFourierTransform">
            <summary>
            Applies forward fast Fourier transformation of the complex image
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.ComplexImage.BackwardFourierTransform">
            <summary>
            Applies backward fast Fourier transformation of the complex image
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.ComplexImage.FrequencyFilter(AForge.IntRange)">
            <summary>
            Performs frequency filter
            </summary>
            
            <param name="range">Frequency range to keep</param>
            
            <remarks>Frequency filter zeros all values which frequencies are
            outside of the spefied range.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Add">
            <summary>
            Add fillter - add overlay image to the source image
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Add.OverlayImage">
            <summary>
            Overlay image
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.Add.OverlayPos">
            <summary>
            Overlay position
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Add.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Add"/> class
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Add.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Add"/> class
            </summary>
            
            <param name="overlayImage">Overlay image</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Add.#ctor(System.Drawing.Bitmap,System.Drawing.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Add"/> class
            </summary>
            
            <param name="overlayImage">Overlay image</param>
            <param name="position">Overlay position</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Add.ProcessFilter(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="imageData">image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Composite">
            <summary>
            Merge filter - get MAX of two pixels
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Composite.OverlayImage">
            <summary>
            Overlay image
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.Composite.OverlayPos">
            <summary>
            Overlay position
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Composite.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Merge"/> class
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Composite.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Merge"/> class
            </summary>
            
            <param name="overlayImage">Overlay image</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Composite.#ctor(System.Drawing.Bitmap,System.Drawing.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Merge"/> class
            </summary>
            
            <param name="overlayImage">Overlay image</param>
            <param name="position">Overlay position</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Composite.ProcessFilter(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="imageData">image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Difference">
            <summary>
            Difference filter - get the difference of overlay and source images
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Difference.OverlayImage">
            <summary>
            Overlay image
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Difference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Difference"/> class
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Difference.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Difference"/> class
            </summary>
            
            <param name="overlayImage">Overlay image</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Difference.ProcessFilter(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="imageData">image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Intersect">
            <summary>
            Intersect filter - get MIN of two pixels
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Intersect.OverlayImage">
            <summary>
            Overlay image
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.Intersect.OverlayPos">
            <summary>
            Overlay position
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Intersect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Merge"/> class
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Intersect.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Merge"/> class
            </summary>
            
            <param name="overlayImage">Overlay image</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Intersect.#ctor(System.Drawing.Bitmap,System.Drawing.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Merge"/> class
            </summary>
            
            <param name="overlayImage">Overlay image</param>
            <param name="position">Overlay position</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Intersect.ProcessFilter(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="imageData">image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Merge">
            <summary>
            Merge filter - get MAX of two pixels
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Merge.OverlayImage">
            <summary>
            Overlay image
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.Merge.OverlayPos">
            <summary>
            Overlay position
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Merge.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Merge"/> class
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Merge.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Merge"/> class
            </summary>
            
            <param name="overlayImage">Overlay image</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Merge.#ctor(System.Drawing.Bitmap,System.Drawing.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Merge"/> class
            </summary>
            
            <param name="overlayImage">Overlay image</param>
            <param name="position">Overlay position</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Merge.ProcessFilter(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="imageData">image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Morph">
            <summary>
            Morph filter
            </summary>
            
            <remarks>Gets specified percentage of source image and the rest from overlay image.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Morph.Percent">
            <summary>
            Percent of source image to keep
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.Morph.OverlayImage">
            <summary>
            Overlay image
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Morph.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Morph"/> class
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Morph.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Morph"/> class
            </summary>
            
            <param name="overlayImage">Overlay image</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Morph.#ctor(System.Drawing.Bitmap,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Morph"/> class
            </summary>
            
            <param name="overlayImage">Overlay image</param>
            <param name="percent">Percent of source image to keep</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Morph.ProcessFilter(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="imageData">image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.MoveTowards">
            <summary>
            Move towards filter
            </summary>
            
            <remarks>Move source image towards overlay image by the specified value</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.MoveTowards.StepSize">
            <summary>
            Step size. Default value is 1.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.MoveTowards.OverlayImage">
            <summary>
            Overlay image
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.MoveTowards.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.MoveTowards"/> class
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.MoveTowards.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.MoveTowards"/> class
            </summary>
            
            <param name="overlayImage">Overlay image</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.MoveTowards.#ctor(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.MoveTowards"/> class
            </summary>
            
            <param name="overlayImage">Overlay image</param>
            <param name="stepSize">Step size</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.MoveTowards.ProcessFilter(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="imageData">image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Subtract">
            <summary>
            Subtract filter - subtract overlay image from the source image
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Subtract.OverlayImage">
            <summary>
            Overlay image
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.Subtract.OverlayPos">
            <summary>
            Overlay position
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Subtract.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Add"/> class
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Subtract.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Add"/> class
            </summary>
            
            <param name="overlayImage">Overlay image</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Subtract.#ctor(System.Drawing.Bitmap,System.Drawing.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Add"/> class
            </summary>
            
            <param name="overlayImage">Overlay image</param>
            <param name="position">Overlay position</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Subtract.ProcessFilter(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="imageData">image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.SISThreshold">
            <summary>
            Threshold using Simple Image Statistics (SIS)
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.SISThreshold.Threshold">
            <summary>
            Threshold value
            </summary>
            
            <remarks>The property is read only and represents the value, which
            was automaticaly calculated using image statistics.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.SISThreshold.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.FilterAnyToAny">
            <summary>
            Base class for filtering any images without changing pixel format
            </summary>
            
            <remarks>The abstract class is the base class for all filters, which can
            be applied to color and grayscale images without changing their pixel format
            and image dimension. The base class is used for filters, which can be applied as
            directly to the specified image modifying it, as to the specified image
            returning new image, which represent result of image processing filter.
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterAnyToAny.Apply(System.Drawing.Bitmap)">
             <summary>
             Apply filter to an image
             </summary>
             
             <param name="image">Source image to apply filter to</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image</returns>
             
             <remarks>The method keeps the source image unchanged and returns the
             the result of image processing filter as new image.</remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterAnyToAny.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="imageData">Source image to apply filter to</param>
            
            <returns>Returns filter's result obtained by applying the filter to
            the source image</returns>
            
            <remarks>The filter accepts birmap data as input and returns the result
            of image processing filter as new image. The source image data are kept
            unchanged.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterAnyToAny.ApplyInPlace(System.Drawing.Bitmap)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="image">Image to apply filter to</param>
            
            <remarks>The method applies the filter directly to the provided
            image.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterAnyToAny.ApplyInPlace(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="imageData">Image to apply filter to</param>
            
            <remarks>The method applies the filter directly to the provided
            image data.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterAnyToAny.ProcessFilter(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="imageData">Image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.FilterAnyToAnyNew">
            <summary>
            Base class for filtering any images without changing pixel format, but
            creating new image of new size
            </summary>
            
            <remarks>The abstract class is the base class for all filters, which can
            be applied to color and grayscale images without changing their pixel format
            but changing image dimension. The base class is used for filters, which can not be applied
            directly to the specified source image updating them. Instead of this, these
            filters return new image as a result of processing routine.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterAnyToAnyNew.Apply(System.Drawing.Bitmap)">
             <summary>
             Apply filter to an image
             </summary>
             
             <param name="image">Source image to apply filter to</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image</returns>
             
             <remarks>The method keeps the source image unchanged and returns the
             the result of image processing filter as new image.</remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterAnyToAnyNew.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="imageData">Source image to apply filter to</param>
            
            <returns>Returns filter's result obtained by applying the filter to
            the source image</returns>
            
            <remarks>The filter accepts birmap data as input and returns the result
            of image processing filter as new image. The source image data are kept
            unchanged.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterAnyToAnyNew.CalculateNewImageSize(System.Drawing.Imaging.BitmapData)">
            <summary>
            Calculates new image size
            </summary>
            
            <param name="sourceData">Source image data</param>
            
            <returns>New image size</returns>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterAnyToAnyNew.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.FilterAnyToAnyNewSameSize">
            <summary>
            Base class for filtering any images without changing pixel format, but
            creating new image
            </summary>
            
            <remarks>The abstract class is the base class for all filters, which can
            be applied to color and grayscale images without changing their pixel format
            and image dimension. The base class is used for filters, which can not be applied
            directly to the specified source image updating them. Instead of this, these
            filters return new image as a result of processing routine.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterAnyToAnyNewSameSize.Apply(System.Drawing.Bitmap)">
             <summary>
             Apply filter to an image
             </summary>
             
             <param name="image">Source image to apply filter to</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image</returns>
             
             <remarks>The method keeps the source image unchanged and returns the
             the result of image processing filter as new image.</remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterAnyToAnyNewSameSize.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="imageData">Source image to apply filter to</param>
            
            <returns>Returns filter's result obtained by applying the filter to
            the source image</returns>
            
            <remarks>The filter accepts birmap data as input and returns the result
            of image processing filter as new image. The source image data are kept
            unchanged.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterAnyToAnyNewSameSize.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.FilterAnyToGray">
            <summary>
            Base class for filters, which accept color or grayscale images and
            return grayscale image as a result
            </summary>
            
            <remarks>The abstract class is the base class for all filters, which
            accept color or grayscale images and return grayscale image as a result.
            These filters do not change dimension of source image. Filters based on
            this class cannot be applied directly to the source image. Instead of
            this they provide output image as a result of image processing routine.
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterAnyToGray.Apply(System.Drawing.Bitmap)">
             <summary>
             Apply filter to an image
             </summary>
             
             <param name="image">Source image to apply filter to</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image</returns>
             
             <remarks>The method keeps the source image unchanged and returns the
             the result of image processing filter as new image.</remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterAnyToGray.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="imageData">Source image to apply filter to</param>
            
            <returns>Returns filter's result obtained by applying the filter to
            the source image</returns>
            
            <remarks>The filter accepts birmap data as input and returns the result
            of image processing filter as new image. The source image data are kept
            unchanged.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterAnyToGray.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.FilterColorToColor">
            <summary>
            Base class for filtering colored images without changing pixel format
            </summary>
            
            <remarks>The abstract class is the base class for all filters, which can
            be applied to color images without changing their pixel format and image
            dimension. The base class is used for filters, which can be applied as
            directly to the specified image modifying it, as to the specified image
            returning new image, which represent result of image processing filter.
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterColorToColor.Apply(System.Drawing.Bitmap)">
             <summary>
             Apply filter to an image
             </summary>
             
             <param name="image">Source image to apply filter to</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image</returns>
             
             <remarks>The method keeps the source image unchanged and returns the
             the result of image processing filter as new image.</remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterColorToColor.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="imageData">Source image to apply filter to</param>
            
            <returns>Returns filter's result obtained by applying the filter to
            the source image</returns>
            
            <remarks>The filter accepts birmap data as input and returns the result
            of image processing filter as new image. The source image data are kept
            unchanged.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterColorToColor.ApplyInPlace(System.Drawing.Bitmap)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="image">Image to apply filter to</param>
            
            <remarks>The method applies the filter directly to the provided
            image.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterColorToColor.ApplyInPlace(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="imageData">Image to apply filter to</param>
            
            <remarks>The method applies the filter directly to the provided
            image data.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterColorToColor.ProcessFilter(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="imageData">Image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.FilterColorToGray">
            <summary>
            Base class for filters, which transform color image to grayscale
            </summary>
            
            <remarks>The abstract class is the base class for all filters, which
            transform color imgae to grayscale without changing image dimension.
            Filters based on this class cannot be applied directly to the source
            image. Instead of this they provide output image as a result of image
            processing routine.
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterColorToGray.Apply(System.Drawing.Bitmap)">
             <summary>
             Apply filter to an image
             </summary>
             
             <param name="image">Source image to apply filter to</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image</returns>
             
             <remarks>The method keeps the source image unchanged and returns the
             the result of image processing filter as new image.</remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterColorToGray.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="imageData">Source image to apply filter to</param>
            
            <returns>Returns filter's result obtained by applying the filter to
            the source image</returns>
            
            <remarks>The filter accepts birmap data as input and returns the result
            of image processing filter as new image. The source image data are kept
            unchanged.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterColorToGray.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.FilterGrayToColor">
            <summary>
            Base class for filters, which transform grayscale image to color
            </summary>
            
            <remarks>The abstract class is the base class for all filters, which
            transform grayscale to color imgae without changing image dimension.
            Filters based on this class cannot be applied directly to the source
            image. Instead of this they provide output image as a result of image
            processing routine.
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterGrayToColor.Apply(System.Drawing.Bitmap)">
             <summary>
             Apply filter to an image
             </summary>
             
             <param name="image">Source image to apply filter to</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image</returns>
             
             <remarks>The method keeps the source image unchanged and returns the
             the result of image processing filter as new image.</remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterGrayToColor.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="imageData">Source image to apply filter to</param>
            
            <returns>Returns filter's result obtained by applying the filter to
            the source image</returns>
            
            <remarks>The filter accepts birmap data as input and returns the result
            of image processing filter as new image. The source image data are kept
            unchanged.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterGrayToColor.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.FilterGrayToGrayNewSameSize">
            <summary>
            Base class for filtering grayscale images without changing pixel format, but
            creating new image
            </summary>
            
            <remarks>The abstract class is the base class for all filters, which can
            be applied to grayscale images without changing their pixel format
            and image dimension. The base class is used for filters, which can not be applied
            directly to the specified source image updating them. Instead of this, these
            filters return new image as a result of processing routine.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterGrayToGrayNewSameSize.Apply(System.Drawing.Bitmap)">
             <summary>
             Apply filter to an image
             </summary>
             
             <param name="image">Source image to apply filter to</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image</returns>
             
             <remarks>The method keeps the source image unchanged and returns the
             the result of image processing filter as new image.</remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterGrayToGrayNewSameSize.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="imageData">Source image to apply filter to</param>
            
            <returns>Returns filter's result obtained by applying the filter to
            the source image</returns>
            
            <remarks>The filter accepts birmap data as input and returns the result
            of image processing filter as new image. The source image data are kept
            unchanged.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterGrayToGrayNewSameSize.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.FilterResize">
            <summary>
            Base class for image resizing filters
            </summary>
            
            <remarks>The abstract class is the base class for all filters,
            which implement resizing algorithms.</remarks>
            
        </member>
        <member name="F:AForge.Imaging.Filters.FilterResize.newWidth">
            <summary>
            New image width
            </summary>
        </member>
        <member name="F:AForge.Imaging.Filters.FilterResize.newHeight">
            <summary>
            New image height
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.FilterResize.NewWidth">
            <summary>
            Width of new image
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.Filters.FilterResize.NewHeight">
            <summary>
            Height of new image
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterResize.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.FilterResize"/> class
            </summary>
            
            <param name="newWidth">Width of new image</param>
            <param name="newHeight">Height of new image</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterResize.CalculateNewImageSize(System.Drawing.Imaging.BitmapData)">
            <summary>
            Calculates new image size
            </summary>
            
            <param name="sourceData">Source image data</param>
            
            <returns>New image size</returns>
            
        </member>
        <member name="T:AForge.Imaging.Filters.FilterRotate">
            <summary>
            Base class for image rotation filters
            </summary>
            
            <remarks>The abstract class is the base class for all filters,
            which implement rotating algorithms.</remarks>
            
        </member>
        <member name="F:AForge.Imaging.Filters.FilterRotate.angle">
            <summary>
            Rotation angle
            </summary>
        </member>
        <member name="F:AForge.Imaging.Filters.FilterRotate.keepSize">
            <summary>
            Keep image size or not
            </summary>
        </member>
        <member name="F:AForge.Imaging.Filters.FilterRotate.fillColor">
            <summary>
            Fill color
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.FilterRotate.Angle">
            <summary>
            Rotation angle
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.FilterRotate.KeepSize">
            <summary>
            Keep image size or not
            </summary>
            
            <remarks>The property determines if source image's size will be kept
            or not. If the value is set to <b>false</b>, then new image will have
            new dimension according to rotation angle. If the valus is set to
            <b>true</b>, then new image will have the same size.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.FilterRotate.FillColor">
            <summary>
            Fill color
            </summary>
            
            <remarks>The fill color is used to fill areas of destination image,
            which don't have corresponsing pixels in source image.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterRotate.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.FilterRotate"/> class
            </summary>
            
            <param name="angle">Rotation angle</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterRotate.#ctor(System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.FilterRotate"/> class
            </summary>
            
            <param name="angle">Rotation angle</param>
            <param name="keepSize">Keep image size or not</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterRotate.CalculateNewImageSize(System.Drawing.Imaging.BitmapData)">
            <summary>
            Calculates new image size
            </summary>
            
            <param name="sourceData">Source image data</param>
            
            <returns>New image size</returns>
            
        </member>
        <member name="T:AForge.Imaging.Filters.BayerDithering">
            <summary>
            Ordered dithering uaing Bayer matrix
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BayerDithering.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.BayerDithering"/> class
            </summary>
            
        </member>
        <member name="T:AForge.Imaging.Filters.BurkesDithering">
            <summary>
            Dithering using Burkes error diffusion
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BurkesDithering.Diffuse(System.Int32,System.Byte*)">
            <summary>
            Do error diffusion
            </summary>
            
            <param name="error">Current error value</param>
            <param name="ptr">Pointer to current processing pixel</param>
            
            <remarks>All parameters of the image and current processing pixel's coordinates
            are initialized by base class.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.ErrorDiffusionDithering">
            <summary>
            Base class for error diffusion dithering
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="F:AForge.Imaging.Filters.ErrorDiffusionDithering.x">
            <summary>
            Current processing X coordinate
            </summary>
        </member>
        <member name="F:AForge.Imaging.Filters.ErrorDiffusionDithering.y">
            <summary>
            Current processing Y coordinate
            </summary>
        </member>
        <member name="F:AForge.Imaging.Filters.ErrorDiffusionDithering.width">
            <summary>
            Processing image's width
            </summary>
        </member>
        <member name="F:AForge.Imaging.Filters.ErrorDiffusionDithering.height">
            <summary>
            Processing image's height
            </summary>
        </member>
        <member name="F:AForge.Imaging.Filters.ErrorDiffusionDithering.widthM1">
            <summary>
            Processing image's width minus 1
            </summary>
        </member>
        <member name="F:AForge.Imaging.Filters.ErrorDiffusionDithering.heightM1">
            <summary>
            Processing image's height minus 1 
            </summary>
        </member>
        <member name="F:AForge.Imaging.Filters.ErrorDiffusionDithering.stride">
            <summary>
            Processing image's stride (line size)
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.ErrorDiffusionDithering.Diffuse(System.Int32,System.Byte*)">
            <summary>
            Do error diffusion
            </summary>
            
            <param name="error">Current error value</param>
            <param name="ptr">Pointer to current processing pixel</param>
            
            <remarks>All parameters of the image and current processing pixel's coordinates
            are initialized in protected members.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ErrorDiffusionDithering.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.FloydSteinbergDithering">
            <summary>
            Dithering using Floyd-Steinberg error diffusion
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FloydSteinbergDithering.Diffuse(System.Int32,System.Byte*)">
            <summary>
            Do error diffusion
            </summary>
            
            <param name="error">Current error value</param>
            <param name="ptr">Pointer to current processing pixel</param>
            
            <remarks>All parameters of the image and current processing pixel's coordinates
            are initialized by base class.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.JarvisJudiceNinkeDithering">
            <summary>
            Dithering using Jarvis, Judice and Ninke error diffusion
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.JarvisJudiceNinkeDithering.Diffuse(System.Int32,System.Byte*)">
            <summary>
            Do error diffusion
            </summary>
            
            <param name="error">Current error value</param>
            <param name="ptr">Pointer to current processing pixel</param>
            
            <remarks>All parameters of the image and current processing pixel's coordinates
            are initialized by base class.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.OrderedDithering">
            <summary>
            Binarization with thresholds matrix
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.OrderedDithering.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.OrderedDithering"/> class
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.OrderedDithering.#ctor(System.Byte[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.OrderedDithering"/> class
            </summary>
            
            <param name="matrix">Thresholds matrix</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.OrderedDithering.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.SierraDithering">
            <summary>
            Dithering using Sierra error diffusion
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.SierraDithering.Diffuse(System.Int32,System.Byte*)">
            <summary>
            Do error diffusion
            </summary>
            
            <param name="error">Current error value</param>
            <param name="ptr">Pointer to current processing pixel</param>
            
            <remarks>All parameters of the image and current processing pixel's coordinates
            are initialized by base class.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.StevensonArceDithering">
            <summary>
            Dithering using Stevenson and Arce error diffusion
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.StevensonArceDithering.Diffuse(System.Int32,System.Byte*)">
            <summary>
            Do error diffusion
            </summary>
            
            <param name="error">Current error value</param>
            <param name="ptr">Pointer to current processing pixel</param>
            
            <remarks>All parameters of the image and current processing pixel's coordinates
            are initialized by base class.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.StuckiDithering">
            <summary>
            Dithering using Stucki error diffusion
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.StuckiDithering.Diffuse(System.Int32,System.Byte*)">
            <summary>
            Do error diffusion
            </summary>
            
            <param name="error">Current error value</param>
            <param name="ptr">Pointer to current processing pixel</param>
            
            <remarks>All parameters of the image and current processing pixel's coordinates
            are initialized by base class.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Threshold">
            <summary>
            Threshold binarization
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Threshold.ThresholdValue">
            <summary>
            Threshold value (default is 128)
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Threshold.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Threshold"/> class
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Threshold.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Threshold"/> class
            </summary>
            
            <param name="threshold">Threshold value</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Threshold.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.ThresholdWithCarry">
            <summary>
            Threshold binarization with error carry
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ThresholdWithCarry.ThresholdValue">
            <summary>
            Threshold value (default is 128)
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.ThresholdWithCarry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ThresholdWithCarry"/> class
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ThresholdWithCarry.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ThresholdWithCarry"/> class
            </summary>
            
            <param name="threshold">Threshold value</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ThresholdWithCarry.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.ChannelFiltering">
            <summary>
            Channels filters
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ChannelFiltering.Red">
            <summary>
            Red channel's range
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ChannelFiltering.FillRed">
            <summary>
            Red fill value
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ChannelFiltering.Green">
            <summary>
            Green channel's range
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ChannelFiltering.FillGreen">
            <summary>
            Green fill value
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ChannelFiltering.Blue">
            <summary>
            Blue channel's range
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ChannelFiltering.FillBlue">
            <summary>
            Blue fill value
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ChannelFiltering.RedFillOutsideRange">
            <summary>
            Determines, if red channel should be filled inside or outside filtering range.
            Default value is <b>true</b>.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ChannelFiltering.GreenFillOutsideRange">
            <summary>
            Determines, if green channel should be filled inside or outside filtering range
            Default value is <b>true</b>.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ChannelFiltering.BlueFillOutsideRange">
            <summary>
            Determines, if blue channel should be filled inside or outside filtering range
            Default value is <b>true</b>.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.ChannelFiltering.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ChannelFiltering"/> class
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ChannelFiltering.#ctor(AForge.IntRange,AForge.IntRange,AForge.IntRange)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ChannelFiltering"/> class
            </summary>
            
            <param name="red">Red channel's filtering range</param>
            <param name="green">Green channel's filtering range</param>
            <param name="blue">Blue channel's filtering range</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ChannelFiltering.ProcessFilter(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="imageData">Image data</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ChannelFiltering.CalculateMap(AForge.IntRange,System.Byte,System.Boolean,System.Byte[])">
            <summary>
            Calculate filtering map
            </summary>
            
            <param name="range">Filtering range</param>
            <param name="fill">Fillter value</param>
            <param name="fillOutsideRange">Fill outside or inside the range</param>
            <param name="map">Filtering map</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.ColorFiltering">
            <summary>
            Color filtering
            </summary>
            
            <remarks>The filter filters pixels inside or outside of specified color range</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ColorFiltering.Red">
            <summary>
            Range of red color component
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ColorFiltering.Green">
            <summary>
            Range of green color component
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ColorFiltering.Blue">
            <summary>
            Range of blue color component
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ColorFiltering.FillColor">
            <summary>
            Fill color used to fill filtered pixels
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ColorFiltering.FillOutsideRange">
            <summary>
            Determines, if pixels should be filled inside or outside specified
            color range
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.ColorFiltering.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ColorFiltering"/> class
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ColorFiltering.#ctor(AForge.IntRange,AForge.IntRange,AForge.IntRange)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ColorFiltering"/> class
            </summary>
            
            <param name="red">Red components filtering range</param>
            <param name="green">Green components filtering range</param>
            <param name="blue">Blue components filtering range</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ColorFiltering.ProcessFilter(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="imageData">Image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.EuclideanColorFiltering">
            <summary>
            Euclidean color filtering
            </summary>
            
            <remarks>The filter filters pixel, which color is inside or outside
            of RGB sphere with specified center and radius.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.EuclideanColorFiltering.Radius">
            <summary>
            RGB sphere's radius. Default value is 100.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.EuclideanColorFiltering.CenterColor">
            <summary>
            RGB sphere's center. Default value is (255, 255, 255) - white color.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.EuclideanColorFiltering.FillColor">
            <summary>
            Fill color
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.EuclideanColorFiltering.FillOutside">
            <summary>
            Determines, if pixels should be filled inside or outside specified
            RGB sphere
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.EuclideanColorFiltering.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.EuclideanColorFiltering"/> class
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.EuclideanColorFiltering.#ctor(System.Drawing.Color,System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.EuclideanColorFiltering"/> class
            </summary>
            
            <param name="center">RGB sphere's center</param>
            <param name="radius">RGB sphere's radius</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.EuclideanColorFiltering.ProcessFilter(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="imageData">Image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.ExtractChannel">
            <summary>
            Extract RGB channel from image
            </summary>
            
            <remarks>Extracts specified channel of color image and returns
            it the form of grayscale image.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ExtractChannel.Channel">
            <summary>
            RGB channel to extract (default value is red)
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.ExtractChannel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ExtractChannel"/> class
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ExtractChannel.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ExtractChannel"/> class
            </summary>
            
            <param name="channel">RGB channel to extract</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ExtractChannel.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.GammaCorrection">
            <summary>
            Gamma correction filter
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.GammaCorrection.Gamma">
            <summary>
            Gamma value (default value is 2.2)
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.GammaCorrection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.GammaCorrection"/> class
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.GammaCorrection.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.GammaCorrection"/> class
            </summary>
            
            <param name="gamma">Gamma value</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.GammaCorrection.ProcessFilter(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="imageData">Image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Grayscale">
            <summary>
            Base class for image grayscaling
            </summary>
            
            <remarks>This class is the base class for image grayscaling. Other
            classes should inherit from this class and specify <b>RGB</b>
            coefficients used for image conversion to grayscale.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Grayscale.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Grayscale"/> class
            </summary>
            
            <param name="cr">Red coefficient</param>
            <param name="cg">Green coefficient</param>
            <param name="cb">Blue coefficient</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Grayscale.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.GrayscaleBT709">
            <summary>
            Grayscale using BT709 algorithm
            </summary>
            
            <remarks>The class uses <b>BT709</b> algorithm to convert color image
            to grayscale. The conversion coefficients are:
            <list type="bullet">
            <item>Red: 0.2125;</item>
            <item>Green: 0.7154;</item>
            <item>Blue: 0.0721.</item>
            </list>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.GrayscaleBT709.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.GrayscaleBT709"/> class
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.GrayscaleRMY">
            <summary>
            Grayscale using R-Y algorithm
            </summary>
            
            <remarks>The class uses <b>R-Y</b> algorithm to convert color image
            to grayscale. The conversion coefficients are:
            <list type="bullet">
            <item>Red: 0.5;</item>
            <item>Green: 0.419;</item>
            <item>Blue: 0.081.</item>
            </list>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.GrayscaleRMY.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.GrayscaleRMY"/> class
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.GrayscaleToRGB">
            <summary>
            Convert grayscale image to RGB
            </summary>
            
            <remarks>The filter creates color image from specified grayscale image
            initializing all RGB channels to the same value - pixel's intensity.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.GrayscaleToRGB.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.GrayscaleY">
            <summary>
            Grayscale using Y algorithm
            </summary>
            
            <remarks>The class uses <b>Y</b> algorithm to convert color image
            to grayscale. The conversion coefficients are:
            <list type="bullet">
            <item>Red: 0.299;</item>
            <item>Green: 0.587;</item>
            <item>Blue: 0.114.</item>
            </list>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.GrayscaleY.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.GrayscaleY"/> class
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.Invert">
             <summary>
             Invert image
             </summary>
             
             <remarks>The filter inverts colored and grayscale images.</remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Filters.Invert.ProcessFilter(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="imageData">image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.LevelsLinear">
            <summary>
            Linear correction of RGB channels
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.LevelsLinear.InRed">
            <summary>
            Red component's input range
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.LevelsLinear.InGreen">
            <summary>
            Green component's input range
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.LevelsLinear.InBlue">
            <summary>
            Blue component's input range
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.LevelsLinear.InGray">
            <summary>
            Gray component's input range
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.LevelsLinear.Input">
            <summary>
            Input range for all components
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.LevelsLinear.OutRed">
            <summary>
            Red component's output range
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.LevelsLinear.OutGreen">
            <summary>
            Green component's output range
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.LevelsLinear.OutBlue">
            <summary>
            Blue component's output range
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.LevelsLinear.OutGray">
            <summary>
            Gray component's output range
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.LevelsLinear.Output">
            <summary>
            Output range for all components
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.LevelsLinear.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.LevelsLinear"/> class
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.LevelsLinear.ProcessFilter(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="imageData">image data</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.LevelsLinear.CalculateMap(AForge.IntRange,AForge.IntRange,System.Byte[])">
            <summary>
            Calculate conversion map
            </summary>
            
            <param name="inRange">Input range</param>
            <param name="outRange">Output range</param>
            <param name="map">Conversion map</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.ReplaceChannel">
            <summary>
            Replace RGB channel of color imgae
            </summary>
            
            <remarks>Replaces specified RGB channel of color image with
            specified grayscale imge.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ReplaceChannel.Channel">
            <summary>
            RGB channel to replace
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ReplaceChannel.ChannelImage">
            <summary>
            Grayscale image to use for channel replacement
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.ReplaceChannel.#ctor(System.Int16,System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ReplaceChannel"/> class
            </summary>
            
            <param name="channel">RGB channel to replace</param>
            <param name="channelImage">Channel image to use for replacement</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ReplaceChannel.ProcessFilter(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="imageData">Image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.RotateChannels">
            <summary>
            Rotate RGB channels
            </summary>
            
            <remarks>The filter rotates RGB channels: red channel is replaced with green,
            green channel is replaced with blue, blue channel is replaced with red.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.RotateChannels.ProcessFilter(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="imageData">Image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Sepia">
             <summary>
             Sepia filter - brown photo
             </summary>
            
             <remarks>The filter makes an image look like an old brown photo. The main
             idea of the algorithm:
             <list type="bullet">
             <item>transform to YIQ color space;</item>
             <item>modify it;</item>
             <item>transform back to RGB.</item>
             </list>
             <br />
             <b>1) RGB -> YIQ</b>:<br /><code>
            	Y = 0.299 * R + 0.587 * G + 0.114 * B
            	I = 0.596 * R - 0.274 * G - 0.322 * B
            	Q = 0.212 * R - 0.523 * G + 0.311 * B
            	</code><br />
             <b>2) update</b>:<br /><code>
            	I = 51
            	Q = 0
            	</code><br />
            	<b>3) YIQ -> RGB</b>:<br /><code>
            	R = 1.0 * Y + 0.956 * I + 0.621 * Q
            	G = 1.0 * Y - 0.272 * I - 0.647 * Q
            	B = 1.0 * Y - 1.105 * I + 1.702 * Q
            	</code><br />
            	Below is the example of this filter application:
             <list type="bullet">
             <item><b>Source image</b><br /><img src="sample1.jpg" width="480" height="361" /></item>
             <item><b>Result image</b><br /><img src="sepia.jpg" width="480" height="361" /></item>
             </list>
             </remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Filters.Sepia.ProcessFilter(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="imageData">Image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Blur">
            <summary>
            Blur filter
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Blur.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Blur"/> class
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.Convolution">
            <summary>
            Convolution filter
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Convolution.#ctor(System.Int32[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Convolution"/> class
            </summary>
            
            <param name="kernel">Processing kernel</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Correlation">
            <summary>
            Correlation filter
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="F:AForge.Imaging.Filters.Correlation.kernel">
            <summary>
            Processing kernel
            </summary>
        </member>
        <member name="F:AForge.Imaging.Filters.Correlation.size">
            <summary>
            Kernel size
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Correlation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Correlation"/> class
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Correlation.#ctor(System.Int32[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Correlation"/> class
            </summary>
            
            <param name="kernel">Processing kernel</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Correlation.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Edges">
            <summary>
            Simple edge detector
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Edges.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Edges"/> class
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.GaussianBlur">
            <summary>
            Gaussian blur filter
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.GaussianBlur.Sigma">
            <summary>
            Gaussian sigma value
            </summary>
            
            <remarks>Sigma value for Gaussian function used to calculate
            the kernel. Default value is 1.4. Minimum value is 0.5. Maximum
            value is 5.0.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.GaussianBlur.Size">
            <summary>
            Kernel size
            </summary>
            
            <remarks>Size of Gaussian kernel. Default value is 5. Minimum value is 3.
            Maximum value is 5. The value should be odd.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.GaussianBlur.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Correlation"/> class
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.GaussianBlur.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Correlation"/> class
            </summary>
            
            <param name="sigma">Gaussian sigma value</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.GaussianBlur.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Correlation"/> class
            </summary>
            
            <param name="sigma">Gaussian sigma value</param>
            <param name="size">Kernel size</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.GaussianBlur.Apply(System.Drawing.Bitmap)">
             <summary>
             Apply filter to an image
             </summary>
             
             <param name="image">Source image to apply filter to</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image</returns>
             
             <remarks>The method keeps the source image unchanged and returns the
             the result of image processing filter as new image.</remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Filters.GaussianBlur.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="imageData">Source image to apply filter to</param>
            
            <returns>Returns filter's result obtained by applying the filter to
            the source image</returns>
            
            <remarks>The filter accepts birmap data as input and returns the result
            of image processing filter as new image. The source image data are kept
            unchanged.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Mean">
            <summary>
            Mean filter
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Mean.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Mean"/> class
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.Sharpen">
            <summary>
            Sharpen filter
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Sharpen.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Sharpen"/> class
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.SharpenEx">
            <summary>
            Extended sharpen filter
            </summary>
            
            <break></break>
            
        </member>
        <member name="P:AForge.Imaging.Filters.SharpenEx.Sigma">
            <summary>
            Gaussian sigma value
            </summary>
            
            <remarks>Sigma value for Gaussian function used to calculate
            the kernel. Default value is 1.4. Minimum value is 0.5. Maximum
            value is 5.0.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.SharpenEx.Size">
            <summary>
            Kernel size
            </summary>
            
            <remarks>Size of Gaussian kernel. Default value is 5. Minimum value is 3.
            Maximum value is 5. The value should be odd.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.SharpenEx.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.SharpenEx"/> class
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.SharpenEx.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.SharpenEx"/> class
            </summary>
            
            <param name="sigma">Gaussian sigma value</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.SharpenEx.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.SharpenEx"/> class
            </summary>
            
            <param name="sigma">Gaussian sigma value</param>
            <param name="size">Kernel size</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.SharpenEx.Apply(System.Drawing.Bitmap)">
             <summary>
             Apply filter to an image
             </summary>
             
             <param name="image">Source image to apply filter to</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image</returns>
             
             <remarks>The method keeps the source image unchanged and returns the
             the result of image processing filter as new image.</remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Filters.SharpenEx.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="imageData">Source image to apply filter to</param>
            
            <returns>Returns filter's result obtained by applying the filter to
            the source image</returns>
            
            <remarks>The filter accepts birmap data as input and returns the result
            of image processing filter as new image. The source image data are kept
            unchanged.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Crop">
            <summary>
            Crop an image
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Crop.Rectangle">
            <summary>
            Rectangle to crop
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Crop.#ctor(System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Crop"/> class
            </summary>
            
            <param name="rect">Rectangle to crop</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Crop.CalculateNewImageSize(System.Drawing.Imaging.BitmapData)">
            <summary>
            Calculates new image size
            </summary>
            
            <param name="sourceData">Source image data</param>
            
            <returns>New image size</returns>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Crop.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.CannyEdgeDetector">
            <summary>
            Canny edge detector
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.CannyEdgeDetector.LowThreshold">
            <summary>
            Low threshold
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.Filters.CannyEdgeDetector.HighThreshold">
            <summary>
            High threshold
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.Filters.CannyEdgeDetector.GaussianSigma">
            <summary>
            Gaussian sigma
            </summary>
            
            <remarks>The value is for Gaussian bluring</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.CannyEdgeDetector.GaussianSize">
            <summary>
            Gaussian size
            </summary>
            
            <remarks>Size of Gaussian kernel</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.CannyEdgeDetector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.CannyEdgeDetector"/> class
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.CannyEdgeDetector.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.CannyEdgeDetector"/> class
            </summary>
            
            <param name="lowThreshold">Low threshold</param>
            <param name="highThreshold">High threshold</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.CannyEdgeDetector.#ctor(System.Byte,System.Byte,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.CannyEdgeDetector"/> class
            </summary>
            
            <param name="lowThreshold">Low threshold</param>
            <param name="highThreshold">High threshold</param>
            <param name="sigma">Gaussian sigma</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.CannyEdgeDetector.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.DifferenceEdgeDetector">
            <summary>
            Homogenity edge detector
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.DifferenceEdgeDetector.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.HomogenityEdgeDetector">
            <summary>
            Homogenity edge detector
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.HomogenityEdgeDetector.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.SobelEdgeDetector">
            <summary>
            Sobel edge detector
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.SobelEdgeDetector.ScaleIntensity">
            <summary>
            Scale intensity
            </summary>
            
            <remarks>The property  determines if pixels intensity should be scaled in the
            range of the lowest and the highest possible intensity value.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.SobelEdgeDetector.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.FilterIterator">
            <summary>
            Filter iterator
            </summary>
            
            <remarks>Filter iterator performs specified amounr of filter's iterations.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.FilterIterator.BaseFilter">
            <summary>
            Base filter
            </summary>
            
            <remarks>The base filter is the filter to be applied specified amount of iterations to
            the specified image.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.FilterIterator.Iterations">
            <summary>
            Iterations amount
            </summary>
            
            <remarks>The amount of times to apply specified filter to the specified image.
            Default value is 1. Minimum value is 1. Maximum value 255.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterIterator.#ctor(AForge.Imaging.Filters.IFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.FilterIterator"/> class
            </summary>
            
            <param name="baseFilter">Filter to iterate</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterIterator.#ctor(AForge.Imaging.Filters.IFilter,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.FilterIterator"/> class
            </summary>
            
            <param name="baseFilter">Filter to iterate</param>
            <param name="iterations">Iterations amount</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterIterator.Apply(System.Drawing.Bitmap)">
             <summary>
             Apply filter to an image
             </summary>
             
             <param name="image">Source image to apply filter to</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image</returns>
             
             <remarks>The method keeps the source image unchanged and returns the
             the result of image processing filter as new image.</remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterIterator.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="imageData">Source image to apply filter to</param>
            
            <returns>Returns filter's result obtained by applying the filter to
            the source image</returns>
            
            <remarks>The filter accepts birmap data as input and returns the result
            of image processing filter as new image. The source image data are kept
            unchanged.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.FiltersSequence">
            <summary>
            FiltersSequence class
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.FiltersSequence.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.FiltersSequence"/> class
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FiltersSequence.#ctor(AForge.Imaging.Filters.IFilter[])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.FiltersSequence"/> class
            </summary>
            
            <param name="filters">Sequence of filters to apply</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.FiltersSequence.Item(System.Int32)">
            <summary>
            Get filter at the specified index 
            </summary>
            
            <param name="index">Index of filter to get</param>
            
            <returns>Returns filter at specified index.</returns>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FiltersSequence.Add(AForge.Imaging.Filters.IFilter)">
            <summary>
            Add new filter to the sequence
            </summary>
            
            <param name="filter">Filter to add to the sequence</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FiltersSequence.Apply(System.Drawing.Bitmap)">
             <summary>
             Apply filter to an image
             </summary>
             
             <param name="image">Source image to apply filter to</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image</returns>
             
             <remarks>The method keeps the source image unchanged and returns the
             the result of image processing filter as new image.</remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Filters.FiltersSequence.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="imageData">Source image to apply filter to</param>
            
            <returns>Returns filter's result obtained by applying the filter to
            the source image</returns>
            
            <remarks>The filter accepts birmap data as input and returns the result
            of image processing filter as new image. The source image data are kept
            unchanged.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.BrightnessCorrection">
            <summary>
            Brightness adjusting in HSL color space
            </summary>
            
            <remarks>The filter operates in <b>HSL</b> color space and adjusts
            pixels brightness value using luminance value of HSL color space.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BrightnessCorrection.AdjustValue">
            <summary>
            Brightness adjust value in the range of [-1, 1]. Default value is 0.1.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.BrightnessCorrection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.BrightnessCorrection"/> class
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BrightnessCorrection.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.BrightnessCorrection"/> class
            </summary>
            
            <param name="adjustValue">Brightness adjust value</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BrightnessCorrection.Apply(System.Drawing.Bitmap)">
             <summary>
             Apply filter to an image
             </summary>
             
             <param name="image">Source image to apply filter to</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image</returns>
             
             <remarks>The method keeps the source image unchanged and returns the
             the result of image processing filter as new image.</remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Filters.BrightnessCorrection.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="imageData">Source image to apply filter to</param>
            
            <returns>Returns filter's result obtained by applying the filter to
            the source image</returns>
            
            <remarks>The filter accepts birmap data as input and returns the result
            of image processing filter as new image. The source image data are kept
            unchanged.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BrightnessCorrection.ApplyInPlace(System.Drawing.Bitmap)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="image">Image to apply filter to</param>
            
            <remarks>The method applies the filter directly to the provided
            image.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BrightnessCorrection.ApplyInPlace(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="imageData">Image to apply filter to</param>
            
            <remarks>The method applies the filter directly to the provided
            image data.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.ContrastCorrection">
            <summary>
            Contrast adjusting in HSL color space
            </summary>
            
            <remarks>The filter operates in <b>HSL</b> color space and adjusts
            pixels contrast value using luminance value of HSL color space.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ContrastCorrection.Factor">
            <summary>
            Contrast adjusting factor. Defailt value is 1.25.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.ContrastCorrection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ContrastCorrection"/> class
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ContrastCorrection.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ContrastCorrection"/> class
            </summary>
            
            <param name="factor">Contrast adjusting factor</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ContrastCorrection.Apply(System.Drawing.Bitmap)">
             <summary>
             Apply filter to an image
             </summary>
             
             <param name="image">Source image to apply filter to</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image</returns>
             
             <remarks>The method keeps the source image unchanged and returns the
             the result of image processing filter as new image.</remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Filters.ContrastCorrection.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="imageData">Source image to apply filter to</param>
            
            <returns>Returns filter's result obtained by applying the filter to
            the source image</returns>
            
            <remarks>The filter accepts birmap data as input and returns the result
            of image processing filter as new image. The source image data are kept
            unchanged.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ContrastCorrection.ApplyInPlace(System.Drawing.Bitmap)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="image">Image to apply filter to</param>
            
            <remarks>The method applies the filter directly to the provided
            image.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ContrastCorrection.ApplyInPlace(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="imageData">Image to apply filter to</param>
            
            <remarks>The method applies the filter directly to the provided
            image data.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.HSLFiltering">
            <summary>
            Color filtering in HSL color space
            </summary>
            
            <remarks>The filter operates in <b>HSL</b> color space and filters
            pixels, which color is inside or outside of specified HSL range.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.HSLFiltering.Hue">
            <summary>
            Range of hue component
            </summary>
            
            <remarks>Because of hue values are cycled, the minimum value of the hue
            range may have bigger integer value then the maximum value.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.HSLFiltering.Saturation">
            <summary>
            Range of saturation component
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.HSLFiltering.Luminance">
            <summary>
            Range of luminance component
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.HSLFiltering.FillColor">
            <summary>
            Fill color used to fill filtered pixels
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.HSLFiltering.FillOutsideRange">
            <summary>
            Determines, if pixels should be filled inside or outside specified
            color range
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.HSLFiltering.UpdateHue">
            <summary>
            Determines, if hue value of filtered pixels should be updated.
            <b>True</b> by default.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.HSLFiltering.UpdateSaturation">
            <summary>
            Determines, if saturation value of filtered pixels should be updated
            <b>True</b> by default.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.HSLFiltering.UpdateLuminance">
            <summary>
            Determines, if luminance value of filtered pixels should be updated
            <b>True</b> by default.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.HSLFiltering.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.HSLFiltering"/> class
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.HSLFiltering.#ctor(AForge.IntRange,AForge.DoubleRange,AForge.DoubleRange)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.HSLFiltering"/> class
            </summary>
            
            <param name="hue">Range of hue component</param>
            <param name="saturation">Range of saturation component</param>
            <param name="luminance">Range of luminance component</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.HSLFiltering.ProcessFilter(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="imageData">Image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.HSLLinear">
            <summary>
            Luminance and saturation linear correction
            </summary>
            
            <remarks>The filter operates in <b>HSL</b> color space and provides
            with the facility of luminance and saturation linear correction.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.HSLLinear.InLuminance">
            <summary>
            Luminance input range
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.HSLLinear.OutLuminance">
            <summary>
            Luminance output range
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.HSLLinear.InSaturation">
            <summary>
            Saturation input range
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.HSLLinear.OutSaturation">
            <summary>
            Saturation output range
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.HSLLinear.ProcessFilter(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="imageData">Image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.HueModifier">
            <summary>
            Hue modifier
            </summary>
            
            <remarks>The filter operates in <b>HSL</b> color space and updates
            pixels hue value setting it the specified value.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.HueModifier.Hue">
            <summary>
            Hue value to set in the range of [0, 359].
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.HueModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.HueModifier"/> class
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.HueModifier.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.HueModifier"/> class
            </summary>
            
            <param name="hue">Hue value to set</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.HueModifier.ProcessFilter(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="imageData">Image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.SaturationCorrection">
            <summary>
            Saturation adjusting in HSL color space
            </summary>
            
            <remarks>The filter operates in <b>HSL</b> color space and adjusts
            pixels saturation value.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.SaturationCorrection.AdjustValue">
            <summary>
            Saturation adjust value in the range of [-1, 1]. Default value is 0.1.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.SaturationCorrection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.SaturationCorrection"/> class
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.SaturationCorrection.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.SaturationCorrection"/> class
            </summary>
            
            <param name="adjustValue">Saturation adjust value</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.SaturationCorrection.Apply(System.Drawing.Bitmap)">
             <summary>
             Apply filter to an image
             </summary>
             
             <param name="image">Source image to apply filter to</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image</returns>
             
             <remarks>The method keeps the source image unchanged and returns the
             the result of image processing filter as new image.</remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Filters.SaturationCorrection.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="imageData">Source image to apply filter to</param>
            
            <returns>Returns filter's result obtained by applying the filter to
            the source image</returns>
            
            <remarks>The filter accepts birmap data as input and returns the result
            of image processing filter as new image. The source image data are kept
            unchanged.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.SaturationCorrection.ApplyInPlace(System.Drawing.Bitmap)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="image">Image to apply filter to</param>
            
            <remarks>The method applies the filter directly to the provided
            image.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.SaturationCorrection.ApplyInPlace(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="imageData">Image to apply filter to</param>
            
            <remarks>The method applies the filter directly to the provided
            image data.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.IFilter">
            <summary>
            Image processing filter interface
            </summary>
            
            <remarks>The interface defines the set of methods, which should be
            provided by all image processing filters. Methods of this interface
            keep the source image unchanged and returt the result of image processing
            filter as new image.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.IFilter.Apply(System.Drawing.Bitmap)">
             <summary>
             Apply filter to an image
             </summary>
             
             <param name="image">Source image to apply filter to</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image</returns>
             
             <remarks>The method keeps the source image unchanged and returns the
             the result of image processing filter as new image.</remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Filters.IFilter.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="imageData">Source image to apply filter to</param>
            
            <returns>Returns filter's result obtained by applying the filter to
            the source image</returns>
            
            <remarks>The filter accepts birmap data as input and returns the result
            of image processing filter as new image. The source image data are kept
            unchanged.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.IInPlaceFilter">
            <summary>
            In Place Filter interface
            </summary>
            
            <remarks>The interface defines the set of methods, which should be
            implemented by filters, which are capable to apply image processing
            filter directly to the source image. Not all of image processing filters
            can be applied directly to the source image - only filter which do not
            change image's dimension and pixel format can be applied directly to the
            source image.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.IInPlaceFilter.ApplyInPlace(System.Drawing.Bitmap)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="image">Image to apply filter to</param>
            
            <remarks>The method applies the filter directly to the provided
            image.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.IInPlaceFilter.ApplyInPlace(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="imageData">Image to apply filter to</param>
            
            <remarks>The method applies the filter directly to the provided
            image data.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.MaskedFilter">
            <summary>
            Masked filter - filter an image using binary mask image.
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.MaskedFilter.Mask">
            <summary>
            Binary mask image
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.Filters.MaskedFilter.Filter1">
            <summary>
            Filter to be applied to image regions, which correspond to
            black pixels of the specified mask.
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.Filters.MaskedFilter.Filter2">
            <summary>
            Filter to be applied to image regios, which correspons to
            white pixels of the specified mask.
            </summary>
            
            <remarks>If the filter is not set, then original source images
            will be used for white pixels of the specified mask.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.MaskedFilter.#ctor(System.Drawing.Bitmap,AForge.Imaging.Filters.IFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.MaskedFilter"/> class
            </summary>
            
            <param name="mask">Binary mask image</param>
            <param name="filter1">Filter for black regions of the mask</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.MaskedFilter.#ctor(System.Drawing.Bitmap,AForge.Imaging.Filters.IFilter,AForge.Imaging.Filters.IFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.MaskedFilter"/> class
            </summary>
            
            <param name="mask">Binary mask image</param>
            <param name="filter1">Filter for black regions of the mask</param>
            <param name="filter2">Filter for white regions of the mask</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.MaskedFilter.Apply(System.Drawing.Bitmap)">
             <summary>
             Apply filter to an image
             </summary>
             
             <param name="image">Source image to apply filter to</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image</returns>
             
             <remarks>The method keeps the source image unchanged and returns the
             the result of image processing filter as new image.</remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Filters.MaskedFilter.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="imageData">Source image to apply filter to</param>
            
            <returns>Returns filter's result obtained by applying the filter to
            the source image</returns>
            
            <remarks>The filter accepts birmap data as input and returns the result
            of image processing filter as new image. The source image data are kept
            unchanged.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Median">
            <summary>
            Median filter
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Median.Size">
            <summary>
            Processing square size for the median filter. Minimum valus is 3.
            Maximum value is 25. The value should be odd. Default value is 3.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Median.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Median"/> class
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Median.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Median"/> class
            </summary>
            
            <param name="size">Processing square size</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Median.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Closing">
            <summary>
            Closing operator from Mathematical Morphology
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Closing.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Closing"/> class
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Closing.#ctor(System.Int16[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Closing"/> class
            </summary>
            
            <param name="se">Structuring element</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Closing.Apply(System.Drawing.Bitmap)">
             <summary>
             Apply filter to an image
             </summary>
             
             <param name="image">Source image to apply filter to</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image</returns>
             
             <remarks>The method keeps the source image unchanged and returns the
             the result of image processing filter as new image.</remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Filters.Closing.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="imageData">Source image to apply filter to</param>
            
            <returns>Returns filter's result obtained by applying the filter to
            the source image</returns>
            
            <remarks>The filter accepts birmap data as input and returns the result
            of image processing filter as new image. The source image data are kept
            unchanged.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Dilatation">
            <summary>
            Dilatation operator from Mathematical Morphology
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Dilatation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Dilatation"/> class
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Dilatation.#ctor(System.Int16[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Dilatation"/> class
            </summary>
            
            <param name="se">Structuring element</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Dilatation.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Erosion">
            <summary>
            Erosion operator from Mathematical Morphology
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Erosion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Erosion"/> class
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Erosion.#ctor(System.Int16[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Erosion"/> class
            </summary>
            
            <param name="se">Structuring element</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Erosion.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.HitAndMiss">
            <summary>
            Hit-And-Miss operator from Mathematical Morphology
            </summary>
            
            <remarks>
            Structuring element contains:
             1 - foreground
             0 - background
            -1 - don't care
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.HitAndMiss.Modes">
            <summary>
            Hit and Miss modes
            </summary>
        </member>
        <member name="F:AForge.Imaging.Filters.HitAndMiss.Modes.HitAndMiss">
            <summary>
            Hit and miss mode
            </summary>
        </member>
        <member name="F:AForge.Imaging.Filters.HitAndMiss.Modes.Thinning">
            <summary>
            Thinning mode
            </summary>
        </member>
        <member name="F:AForge.Imaging.Filters.HitAndMiss.Modes.Thickening">
            <summary>
            Thickening mode
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.HitAndMiss.Mode">
            <summary>
            Operation mode
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.HitAndMiss.#ctor(System.Int16[0:,0:])">
             <summary>
             Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.HitAndMiss"/> class
             </summary>
             
             <param name="se">Structuring element</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.HitAndMiss.#ctor(System.Int16[0:,0:],AForge.Imaging.Filters.HitAndMiss.Modes)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.HitAndMiss"/> class
            </summary>
            
            <param name="se">Structuring element</param>
            <param name="mode">Operation mode</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.HitAndMiss.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Opening">
            <summary>
            Opening operator from Mathematical Morphology
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Opening.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Opening"/> class
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Opening.#ctor(System.Int16[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Opening"/> class
            </summary>
            
            <param name="se">Structuring element</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Opening.Apply(System.Drawing.Bitmap)">
             <summary>
             Apply filter to an image
             </summary>
             
             <param name="image">Source image to apply filter to</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image</returns>
             
             <remarks>The method keeps the source image unchanged and returns the
             the result of image processing filter as new image.</remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Filters.Opening.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="imageData">Source image to apply filter to</param>
            
            <returns>Returns filter's result obtained by applying the filter to
            the source image</returns>
            
            <remarks>The filter accepts birmap data as input and returns the result
            of image processing filter as new image. The source image data are kept
            unchanged.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.AdaptiveSmooth">
            <summary>
            Adaptive Smoothing - noise removal with edges preserving
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.AdaptiveSmooth.Factor">
            <summary>
            Factor value
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.AdaptiveSmooth.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.AdaptiveSmooth"/> class
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.AdaptiveSmooth.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.AdaptiveSmooth"/> class
            </summary>
            
            <param name="factor">Factor value</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.AdaptiveSmooth.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.ConnectedComponentsLabeling">
            <summary>
            Connected components labeling
            </summary>
            
            <remarks>The filter performs labeling of objects in binary image. It colors
            each separate object using different color.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ConnectedComponentsLabeling.ColorTable">
            <summary>
            Colors used to color the binary image
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ConnectedComponentsLabeling.ObjectCount">
            <summary>
            Objects count
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.ConnectedComponentsLabeling.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.ConservativeSmoothing">
            <summary>
            Conservative smoothing
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ConservativeSmoothing.KernelSize">
            <summary>
            Kernel size
            </summary>
            
            <remarks>Determines the size of pixel's square used for smoothing. Default value is 3.
            Minimum value is 3. Maximum value is 25.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ConservativeSmoothing.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ConservativeSmoothing"/> class
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ConservativeSmoothing.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ConservativeSmoothing"/> class
            </summary>
            
            <param name="size">Kernel size</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ConservativeSmoothing.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Jitter">
            <summary>
            Jitter filter
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Jitter.Radius">
            <summary>
            Jittering radius
            </summary>
            
            <remarks>Determines radius in which pixels can move. Default value is 2.
            Minimum value is 1. Maximum value is 10.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Jitter.CopyBefore">
            <summary>
            Determines if source image should be copied to destination image before
            starting the jittering.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Jitter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Jitter"/> class
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Jitter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Jitter"/> class
            </summary>
            
            <param name="radius">Jittering radius</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Jitter.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.OilPainting">
            <summary>
            Oil Painting filter
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.OilPainting.BrushSize">
            <summary>
            Brush size
            </summary>
            
            <remarks>Default value is 5. Minimum value is 3. Maximum value 21.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.OilPainting.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.OilPainting"/> class
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.OilPainting.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.OilPainting"/> class
            </summary>
            
            <param name="brushSize">Brush size</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.OilPainting.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Pixellate">
            <summary>
            Pixellate filter
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Pixellate.PixelWidth">
            <summary>
            Pixel width
            </summary>
            
            <remarks>Default value is 8. Minimum value is 2. Maximum value is 32.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Pixellate.PixelHeight">
            <summary>
            Pixel height
            </summary>
            
            <remarks>Default value is 8. Minimum value is 2. Maximum value is 32.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Pixellate.PixelSize">
            <summary>
            Pixel size
            </summary>
            
            <remarks>The property is used to set both <see cref="P:AForge.Imaging.Filters.Pixellate.PixelWidth"/> and
            <see cref="P:AForge.Imaging.Filters.Pixellate.PixelHeight"/> simultaneously.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Pixellate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Pixellate"/> class
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Pixellate.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Pixellate"/> class
            </summary>
            
            <param name="pixelSize">Pixel size</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Pixellate.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Pixellate"/> class
            </summary>
            
            <param name="pixelWidth">Pixel width</param>
            <param name="pixelHeight">Pixel height</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Pixellate.ProcessFilter(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="imageData">image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Shrink">
            <summary>
            Shrink an image
            </summary>
            
            <remarks>Removes pixels with specified color from image bounds
            reducing image size.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Shrink.ColorToRemove">
            <summary>
            Color to remove
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Shrink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Shrink"/> class
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Shrink.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Shrink"/> class
            </summary>
            
            <param name="colorToRemove">Color to remove</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Shrink.CalculateNewImageSize(System.Drawing.Imaging.BitmapData)">
            <summary>
            Calculates new image size
            </summary>
            
            <param name="sourceData">Source image data</param>
            
            <returns>New image size</returns>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Shrink.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.SimpleSkeletonization">
            <summary>
            Simple skeletonization filter
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.SimpleSkeletonization.Background">
            <summary>
            Background pixel color
            </summary>
            
            <remarks>Defalt value is 0 - black.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.SimpleSkeletonization.Foreground">
            <summary>
            Foreground pixel color
            </summary>
            
            <remarks>Defalt value is 255 - white.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.SimpleSkeletonization.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.SimpleSkeletonization"/> class
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.SimpleSkeletonization.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.SimpleSkeletonization"/> class
            </summary>
            
            <param name="bg">Background pixel color</param>
            <param name="fg">Foreground pixel color</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.SimpleSkeletonization.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.TexturedFilter">
            <summary>
            Textured filter - filter an image using texture
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TexturedFilter.FilterLevel">
            <summary>
            Filter level value
            </summary>
            
            <remarks>Filtering factor determines image fraction to filter.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TexturedFilter.PreserveLevel">
            <summary>
            Preserve level value
            </summary>
            
            <remarks>Preserving factor determines image fraction to keep from filtering.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TexturedFilter.Texture">
            <summary>
            Generated texture
            </summary>
            
            <remarks>Two dimensional array of texture intecities.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TexturedFilter.TextureGenerator">
            <summary>
            Texture generator
            </summary>
            
            <remarks>Generator used to generate texture.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TexturedFilter.Filter1">
            <summary>
            First filter
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TexturedFilter.Filter2">
            <summary>
            Second filter
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.TexturedFilter.#ctor(System.Single[0:,0:],AForge.Imaging.Filters.IFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.TexturedFilter"/> class
            </summary>
            
            <param name="texture">Generated texture</param>
            <param name="filter1">First filter</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.TexturedFilter.#ctor(System.Single[0:,0:],AForge.Imaging.Filters.IFilter,AForge.Imaging.Filters.IFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.TexturedFilter"/> class
            </summary>
            
            <param name="texture">Generated texture</param>
            <param name="filter1">First filter</param>
            <param name="filter2">Second filter</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.TexturedFilter.#ctor(AForge.Imaging.Textures.ITextureGenerator,AForge.Imaging.Filters.IFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.TexturedFilter"/> class
            </summary>
            
            <param name="generator">Texture generator</param>
            <param name="filter1">First filter</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.TexturedFilter.#ctor(AForge.Imaging.Textures.ITextureGenerator,AForge.Imaging.Filters.IFilter,AForge.Imaging.Filters.IFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.TexturedFilter"/> class
            </summary>
            
            <param name="generator">Texture generator</param>
            <param name="filter1">First filter</param>
            <param name="filter2">Second filter</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.TexturedFilter.Apply(System.Drawing.Bitmap)">
             <summary>
             Apply filter to an image
             </summary>
             
             <param name="image">Source image to apply filter to</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image</returns>
             
             <remarks>The method keeps the source image unchanged and returns the
             the result of image processing filter as new image.</remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Filters.TexturedFilter.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter to an image
            </summary>
            
            <param name="imageData">Source image to apply filter to</param>
            
            <returns>Returns filter's result obtained by applying the filter to
            the source image</returns>
            
            <remarks>The filter accepts birmap data as input and returns the result
            of image processing filter as new image. The source image data are kept
            unchanged.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.TexturedMerge">
            <summary>
            Merge two images using factors from texture
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TexturedMerge.Texture">
            <summary>
            Generated texture
            </summary>
            
            <remarks>Two dimensional array of texture intecities.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TexturedMerge.TextureGenerator">
            <summary>
            Texture generator
            </summary>
            
            <remarks>Generator used to generate texture.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TexturedMerge.OverlayImage">
            <summary>
            Overlay image
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.TexturedMerge.#ctor(System.Single[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.TexturedMerge"/> class
            </summary>
            
            <param name="texture">Generated texture</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.TexturedMerge.#ctor(AForge.Imaging.Textures.ITextureGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.TexturedMerge"/> class
            </summary>
            
            <param name="generator">Texture generator</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.TexturedMerge.#ctor(System.Single[0:,0:],System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.TexturedMerge"/> class
            </summary>
            
            <param name="texture">Generated texture</param>
            <param name="overlayImage">Overlay image</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.TexturedMerge.#ctor(AForge.Imaging.Textures.ITextureGenerator,System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.TexturedMerge"/> class
            </summary>
            
            <param name="generator">Texture generator</param>
            <param name="overlayImage">Overlay image</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.TexturedMerge.ProcessFilter(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="imageData">image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Texturer">
            <summary>
            Texturer filter
            </summary>
            
            <remarks>Adjust pixel colors using factors from texture.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Texturer.FilterLevel">
            <summary>
            Filter level value
            </summary>
            
            <remarks>Filtering factor determines image fraction to filter.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Texturer.PreserveLevel">
            <summary>
            Preserve level value
            </summary>
            
            <remarks>Preserving factor determines image fraction to keep from filtering.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Texturer.Texture">
            <summary>
            Generated texture
            </summary>
            
            <remarks>Two dimensional array of texture intecities.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Texturer.TextureGenerator">
            <summary>
            Texture generator
            </summary>
            
            <remarks>Generator used to generate texture.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Texturer.#ctor(System.Single[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Texturer"/> class
            </summary>
            
            <param name="texture">Generated texture</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Texturer.#ctor(System.Single[0:,0:],System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Texturer"/> class
            </summary>
            
            <param name="texture">Generated texture</param>
            <param name="filterLevel">Filter level value</param>
            <param name="preserveLevel">Preserve level value</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Texturer.#ctor(AForge.Imaging.Textures.ITextureGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Texturer"/> class
            </summary>
            
            <param name="generator">Texture generator</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Texturer.#ctor(AForge.Imaging.Textures.ITextureGenerator,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Texturer"/> class
            </summary>
            
            <param name="generator">Texture generator</param>
            <param name="filterLevel">Filter level value</param>
            <param name="preserveLevel">Preserve level value</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Texturer.ProcessFilter(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="imageData">image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.ResizeBicubic">
            <summary>
            Resize image using bicubic interpolation
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ResizeBicubic.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ResizeBicubic"/> class
            </summary>
            
            <param name="newWidth">Width of new image</param>
            <param name="newHeight">Height of new image</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ResizeBicubic.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.ResizeBilinear">
            <summary>
            Resize image using bilinear interpolation
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ResizeBilinear.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ResizeBilinear"/> class
            </summary>
            
            <param name="newWidth">Width of new image</param>
            <param name="newHeight">Height of new image</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ResizeBilinear.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.ResizeNearestNeighbor">
            <summary>
            Resize image using nearest neighbor algorithm
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ResizeNearestNeighbor.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ResizeNearestNeighbor"/> class
            </summary>
            
            <param name="newWidth">Width of new image</param>
            <param name="newHeight">Height of new image</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ResizeNearestNeighbor.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.RotateBicubic">
            <summary>
            Rotate image using bicubic interpolation
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.RotateBicubic.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.RotateNearestNeighbor"/> class
            </summary>
            
            <param name="angle">Rotation angle</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.RotateBicubic.#ctor(System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.RotateNearestNeighbor"/> class
            </summary>
            
            <param name="angle">Rotation angle</param>
            <param name="keepSize">Keep image size or not</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.RotateBicubic.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.RotateBilinear">
            <summary>
            Rotate image using bilinear interpolation
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.RotateBilinear.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.RotateNearestNeighbor"/> class
            </summary>
            
            <param name="angle">Rotation angle</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.RotateBilinear.#ctor(System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.RotateNearestNeighbor"/> class
            </summary>
            
            <param name="angle">Rotation angle</param>
            <param name="keepSize">Keep image size or not</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.RotateBilinear.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.RotateNearestNeighbor">
            <summary>
            Rotate image using nearest neighbor algorithm
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.RotateNearestNeighbor.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.RotateNearestNeighbor"/> class
            </summary>
            
            <param name="angle">Rotation angle</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.RotateNearestNeighbor.#ctor(System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.RotateNearestNeighbor"/> class
            </summary>
            
            <param name="angle">Rotation angle</param>
            <param name="keepSize">Keep image size or not</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.RotateNearestNeighbor.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.YCbCrExtractChannel">
            <summary>
            Extract YCbCr channel from image
            </summary>
            
            <remarks>Extracts specified YCbCr channel of color image and returns
            it the form of grayscale image.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.YCbCrExtractChannel.Channel">
            <summary>
            YCbCr channel to extract (default value is Y)
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.YCbCrExtractChannel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.YCbCrExtractChannel"/> class
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.YCbCrExtractChannel.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.YCbCrExtractChannel"/> class
            </summary>
            
            <param name="channel">YCbCr channel to extract</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.YCbCrExtractChannel.ProcessFilter(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.YCbCrFiltering">
            <summary>
            Color filtering in YCbCr color space
            </summary>
            
            <remarks>The filter operates in <b>YCbCr</b> color space and filters
            pixels, which color is inside or outside of specified YCbCr range.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.YCbCrFiltering.Y">
            <summary>
            Range of Y component
            </summary>
            
            <remarks>Y component is measured in the range of [0, 1].</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.YCbCrFiltering.Cb">
            <summary>
            Range of Cb component
            </summary>
            
            <remarks>Cb component is measured in the range of [-0.5, 0.5].</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.YCbCrFiltering.Cr">
            <summary>
            Range of Cr component
            </summary>
            
            <remarks>Cr component is measured in the range of [-0.5, 0.5].</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.YCbCrFiltering.FillColor">
            <summary>
            Fill color used to fill filtered pixels
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.YCbCrFiltering.FillOutsideRange">
            <summary>
            Determines, if pixels should be filled inside or outside specified
            color range
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.YCbCrFiltering.UpdateY">
            <summary>
            Determines, if Y value of filtered pixels should be updated.
            <b>True</b> by default.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.YCbCrFiltering.UpdateCb">
            <summary>
            Determines, if Cb value of filtered pixels should be updated.
            <b>True</b> by default.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.YCbCrFiltering.UpdateCr">
            <summary>
            Determines, if Cr value of filtered pixels should be updated.
            <b>True</b> by default.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.YCbCrFiltering.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.YCbCrFiltering"/> class
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.YCbCrFiltering.#ctor(AForge.DoubleRange,AForge.DoubleRange,AForge.DoubleRange)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.YCbCrFiltering"/> class
            </summary>
            
            <param name="yRange">Range of Y component</param>
            <param name="cbRange">Range of Cb component</param>
            <param name="crRange">Range of Cr component</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.YCbCrFiltering.ProcessFilter(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="imageData">Image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.YCbCrLinear">
            <summary>
            Linear correction of YCbCr channels
            </summary>
            
            <remarks>The filter operates in <b>YCbCr</b> color space and provides
            with the facility of linear correction of its channels.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.YCbCrLinear.InY">
             <summary>
             Y component's input range
             </summary>
             
             <remarks>Y component is measured in the range of [0, 1].</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.YCbCrLinear.InCb">
             <summary>
             Cb component's input range
             </summary>
             
             <remarks>Cb component is measured in the range of [-0.5, 0.5].</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.YCbCrLinear.InCr">
             <summary>
             Cr component's input range
             </summary>
             
             <remarks>Cr component is measured in the range of [-0.5, 0.5].</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.YCbCrLinear.OutY">
             <summary>
             Y component's output range
             </summary>
             
             <remarks>Y component is measured in the range of [0, 1].</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.YCbCrLinear.OutCb">
             <summary>
             Cb component's output range
             </summary>
             
             <remarks>Cb component is measured in the range of [-0.5, 0.5].</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.YCbCrLinear.OutCr">
             <summary>
             Cr component's output range
             </summary>
             
             <remarks>Cr component is measured in the range of [-0.5, 0.5].</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.YCbCrLinear.ProcessFilter(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="imageData">Image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.YCbCrReplaceChannel">
            <summary>
            Replace channel of YCbCr color space
            </summary>
            
            <remarks>Replaces specified YCbCr channel of color image with
            specified grayscale imge.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.YCbCrReplaceChannel.Channel">
            <summary>
            YCbCr channel to replace
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.YCbCrReplaceChannel.ChannelImage">
            <summary>
            Grayscale image to use for channel replacement
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.YCbCrReplaceChannel.#ctor(System.Int16,System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.YCbCrReplaceChannel"/> class
            </summary>
            
            <param name="channel">YCbCr channel to replace</param>
            <param name="channelImage">Channel image to use for replacement</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.YCbCrReplaceChannel.ProcessFilter(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process the filter on the specified image
            </summary>
            
            <param name="imageData">Image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Image">
            <summary>
            Core image relatad methods
            </summary>
            
            <remarks>All methods of this class are static and represent general routines
            used by different image processing classes.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Image.IsGrayscale(System.Drawing.Bitmap)">
            <summary>
            Check if the image is grayscale
            </summary>
            
            <param name="image">Image to check</param>
            
            <returns>Returns <b>true</b> if the image is grayscale or <b>false</b> otherwise.</returns>
            
            <remarks>The methods check if the image is a grayscale image of 256 gradients.
            The method first examines if the image's pixel format is
            <see cref="T:System.Drawing.Imaging.PixelFormat">Format8bppIndexed</see>
            and then it examines its palette to check if the image is grayscale or not.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Image.CreateGrayscaleImage(System.Int32,System.Int32)">
            <summary>
            Create and initialize grayscale image
            </summary>
            
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            
            <returns>Returns the created grayscale image</returns>
            
            <remarks>The methods create new grayscale image and initializes its palette.
            Grayscale image is represented as
            <see cref="T:System.Drawing.Imaging.PixelFormat">Format8bppIndexed</see>
            image with palette initialized to 256 gradients of gray color</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Image.SetGrayscalePalette(System.Drawing.Bitmap)">
            <summary>
            Set pallete of the image to grayscale
            </summary>
            
            <param name="image">Image to initialize</param>
            
            <remarks>The method initializes palette of
            <see cref="T:System.Drawing.Imaging.PixelFormat">Format8bppIndexed</see>
            image with 256 gradients of gray color.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Image.Clone(System.Drawing.Bitmap,System.Drawing.Imaging.PixelFormat)">
             <summary>
             Clone image
             </summary>
             
             <param name="src">Source image</param>
             <param name="format">Pixel format of result image</param>
             
             <returns>Returns clone of the source image with specified pixel format</returns>
            
             <remarks>The original <see cref="M:System.Drawing.Bitmap.Clone(System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat)">Bitmap.Clone()</see>
             does not produce the desired result - it does not create a clone with specified pixel format.
             More of it, the original method does not create an actual clone - it does not create a copy
             of the image. That is why this method was implemented to provide the functionality.</remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Image.Clone(System.Drawing.Bitmap)">
            <summary>
            Clone image
            </summary>
            
            <param name="src">Source image</param>
            
            <returns>Return clone of the source image</returns>
            
            <remarks>The original <see cref="M:System.Drawing.Bitmap.Clone(System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat)">Bitmap.Clone()</see>
            does not produce the desired result - it does not create an actual clone (it does not create a copy
            of the image). That is why this method was implemented to provide the functionality.</remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Image.FormatImage(System.Drawing.Bitmap@)">
             <summary>
              Format an image
             </summary>
             
             <param name="image">Source image to format</param>
             
             <remarks>Formats the image to one of the formats, which are supported
             by the <b>AForge.Imaging</b> library. The image is left untouched in the
             case if it already of
             <see cref="T:System.Drawing.Imaging.PixelFormat">Format24bppRgb</see>
             format or it is grayscale (<see cref="M:AForge.Imaging.Image.IsGrayscale(System.Drawing.Bitmap)"/>), otherwise the image converted to
             <see cref="T:System.Drawing.Imaging.PixelFormat">Format24bppRgb</see>
             format.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.ImageStatistics">
            <summary>
            Gather statistics about the image in RGB color space
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatistics.Red">
            <summary>
            Histogram of red channel
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatistics.Green">
            <summary>
            Histogram of green channel
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatistics.Blue">
            <summary>
            Histogram of blue channel
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatistics.Gray">
            <summary>
            Histogram of gray channel (intensities)
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatistics.RedWithoutBlack">
            <summary>
            Histogram of the channel excluding black pixels
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatistics.GreenWithoutBlack">
            <summary>
            Histogram of green channel excluding black pixels
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatistics.BlueWithoutBlack">
            <summary>
            Histogram of blue channel excluding black pixels
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatistics.GrayWithoutBlack">
            <summary>
            Histogram of gray channel (intensities) channel excluding black pixels
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatistics.PixelsCount">
            <summary>
            Total pixel count of the image
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatistics.PixelsCountWithoutBlack">
            <summary>
            Total pixel count of the image excluding black pixels
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatistics.IsGrayscale">
            <summary>
            Value wich specifies if the image is color or grayscale
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.ImageStatistics.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.ImageStatistics"/> class
            </summary>
            
            <param name="image">Image to gather statistics about</param>
            
            <remarks>24 bit per pixel or 8 bit indexed (grayscale) images
            are supported only.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.ImageStatistics.#ctor(System.Drawing.Imaging.BitmapData)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.ImageStatistics"/> class
            </summary>
            
            <param name="imageData">Image data to gather statistics about</param>
            
            <remarks>24 bit per pixel or 8 bit indexed (grayscale) images
            are supported only.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.ImageStatistics.ProcessImage(System.Drawing.Imaging.BitmapData)">
            <summary>
            Gather statistics about specified image
            </summary>
            
            <param name="imageData">Image data</param>
            
        </member>
        <member name="T:AForge.Imaging.ImageStatisticsHSL">
            <summary>
            Gather statistics about the image in HSL color space
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatisticsHSL.Saturation">
            <summary>
            Histogram of saturation channel
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatisticsHSL.Luminance">
            <summary>
            Histogram of luminance channel
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatisticsHSL.SaturationWithoutBlack">
            <summary>
            Histogram of saturation channel excluding black pixels
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatisticsHSL.LuminanceWithoutBlack">
            <summary>
            Histogram of luminance channel excluding black pixels
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatisticsHSL.PixelsCount">
            <summary>
            Total pixel count of the image
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatisticsHSL.PixelsCountWithoutBlack">
            <summary>
            Total pixel count of the image excluding black pixels
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.ImageStatisticsHSL.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.ImageStatisticsHSL"/> class
            </summary>
            
            <param name="image">Image to gather statistics about</param>
            
            <remarks>24 bit per pixel images are supported only.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.ImageStatisticsHSL.#ctor(System.Drawing.Imaging.BitmapData)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.ImageStatisticsHSL"/> class
            </summary>
            
            <param name="imageData">Image data to gather statistics about</param>
            
            <remarks>24 bit per pixel images are supported only.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.ImageStatisticsHSL.ProcessImage(System.Drawing.Imaging.BitmapData)">
            <summary>
            Gather statistics about specified image
            </summary>
            
            <param name="imageData">Image data</param>
            
        </member>
        <member name="T:AForge.Imaging.ImageStatisticsYCbCr">
            <summary>
            Gather statistics about the image in YCbCr color space
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatisticsYCbCr.Y">
            <summary>
            Histogram of Y channel
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatisticsYCbCr.Cb">
            <summary>
            Histogram of Cb channel
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatisticsYCbCr.Cr">
            <summary>
            Histogram of Cr channel
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatisticsYCbCr.YWithoutBlack">
            <summary>
            Histogram of Y channel excluding black pixels
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatisticsYCbCr.CbWithoutBlack">
            <summary>
            Histogram of Cb channel excluding black pixels
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatisticsYCbCr.CrWithoutBlack">
            <summary>
            Histogram of Cr channel excluding black pixels
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatisticsYCbCr.PixelsCount">
            <summary>
            Total pixel count of the image
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatisticsYCbCr.PixelsCountWithoutBlack">
            <summary>
            Total pixel count of the image excluding black pixels
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.ImageStatisticsYCbCr.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.ImageStatisticsYCbCr"/> class
            </summary>
            
            <param name="image">Image to gather statistics about</param>
            
            <remarks>24 bit per pixel images are supported only.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.ImageStatisticsYCbCr.#ctor(System.Drawing.Imaging.BitmapData)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.ImageStatisticsYCbCr"/> class
            </summary>
            
            <param name="imageData">Image data to gather statistics about</param>
            
            <remarks>24 bit per pixel images are supported only.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.ImageStatisticsYCbCr.ProcessImage(System.Drawing.Imaging.BitmapData)">
            <summary>
            Gather statistics about specified image
            </summary>
            
            <param name="imageData">Image data</param>
            
        </member>
        <member name="T:AForge.Imaging.Interpolation">
            <summary>
            Interpolation routines
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Interpolation.BiCubicKernel(System.Double)">
            <summary>
            Bicubic kernel
            </summary>
            
            <param name="x">X value</param>
            
            <returns>Bicubic cooefficient</returns>
            
        </member>
        <member name="T:AForge.Imaging.Textures.CloudsTexture">
            <summary>
            Clouds texture
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Textures.CloudsTexture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Textures.CloudsTexture"/> class
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Textures.CloudsTexture.Generate(System.Int32,System.Int32)">
            <summary>
            Generate texture
            </summary>
            
            <param name="width">Texture's width</param>
            <param name="height">Texture's height</param>
            
            <returns>Two dimensional array of intensities</returns>
            
            <remarks>Generates new texture with specified dimension.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Textures.CloudsTexture.Reset">
            <summary>
            Reset generator
            </summary>
            
            <remarks>Regenerates internal random numbers.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Textures.ITextureGenerator">
            <summary>
            Texture generator interface
            </summary>
            
            <remarks>Each texture generator generates a texture of the specified size and returns
            a two dimensional array of intensities in the range of [0; 1].</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Textures.ITextureGenerator.Generate(System.Int32,System.Int32)">
            <summary>
            Generate texture
            </summary>
            
            <param name="width">Texture's width</param>
            <param name="height">Texture's height</param>
            
            <returns>Two dimensional array of intensities</returns>
            
            <remarks>Generates new texture with specified dimension.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Textures.ITextureGenerator.Reset">
            <summary>
            Reset generator
            </summary>
            
            <remarks>Resets the generator - resets interl variables, regenerates
            internal random numbers, etc.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Textures.LabyrinthTexture">
            <summary>
            Labirinth texture
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Textures.LabyrinthTexture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Textures.LabyrinthTexture"/> class
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Textures.LabyrinthTexture.Generate(System.Int32,System.Int32)">
            <summary>
            Generate texture
            </summary>
            
            <param name="width">Texture's width</param>
            <param name="height">Texture's height</param>
            
            <returns>Two dimensional array of intensities</returns>
            
            <remarks>Generates new texture with specified dimension.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Textures.LabyrinthTexture.Reset">
            <summary>
            Reset generator
            </summary>
            
            <remarks>Regenerates internal random numbers.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Textures.MarbleTexture">
            <summary>
            Marble texture
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Textures.MarbleTexture.XPeriod">
            <summary>
            XPeriod value
            </summary>
            
            <remarks>Default value is 5. Minimum value is 2.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Textures.MarbleTexture.YPeriod">
            <summary>
            YPeriod value
            </summary>
            
            <remarks>Default value is 10. Minimum value is 2.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Textures.MarbleTexture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Textures.MarbleTexture"/> class
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Textures.MarbleTexture.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Textures.MarbleTexture"/> class
            </summary>
            
            <param name="xPeriod">XPeriod value</param>
            <param name="yPeriod">YPeriod value</param>
            
        </member>
        <member name="M:AForge.Imaging.Textures.MarbleTexture.Generate(System.Int32,System.Int32)">
            <summary>
            Generate texture
            </summary>
            
            <param name="width">Texture's width</param>
            <param name="height">Texture's height</param>
            
            <returns>Two dimensional array of intensities</returns>
            
            <remarks>Generates new texture with specified dimension.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Textures.MarbleTexture.Reset">
            <summary>
            Reset generator
            </summary>
            
            <remarks>Regenerates internal random numbers.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Textures.TextileTexture">
            <summary>
            Åextile texture
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Textures.TextileTexture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Textures.TextileTexture"/> class
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Textures.TextileTexture.Generate(System.Int32,System.Int32)">
            <summary>
            Generate texture
            </summary>
            
            <param name="width">Texture's width</param>
            <param name="height">Texture's height</param>
            
            <returns>Two dimensional array of intensities</returns>
            
            <remarks>Generates new texture with specified dimension.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Textures.TextileTexture.Reset">
            <summary>
            Reset generator
            </summary>
            
            <remarks>Regenerates internal random numbers.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Textures.WoodTexture">
            <summary>
            Wood texture
            </summary>
            
            <remarks></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Textures.WoodTexture.Rings">
            <summary>
            Rings amount
            </summary>
            
            <remarks>Default value is 12. Minimum value is 3</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Textures.WoodTexture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Textures.WoodTexture"/> class
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Textures.WoodTexture.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Textures.WoodTexture"/> class
            </summary>
            
            <param name="rings">Rings amount</param>
            
        </member>
        <member name="M:AForge.Imaging.Textures.WoodTexture.Generate(System.Int32,System.Int32)">
            <summary>
            Generate texture
            </summary>
            
            <param name="width">Texture's width</param>
            <param name="height">Texture's height</param>
            
            <returns>Two dimensional array of intensities</returns>
            
            <remarks>Generates new texture with specified dimension.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Textures.WoodTexture.Reset">
            <summary>
            Reset generator
            </summary>
            
            <remarks>Regenerates internal random numbers.</remarks>
            
        </member>
    </members>
</doc>
